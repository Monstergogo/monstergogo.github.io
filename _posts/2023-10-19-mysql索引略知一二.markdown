---
title: mysql索引略知一二
date: 2023-10-19 17:50:00 +0800
categories: [mysql]
tags: [mysql, innodb, 索引]
author: stephan
mermaid: true
---

## 存储结构
innodb索引存储结构采用的是b+树，2层结构的b+树如下：
![avatar](/assets/img/b%2B_tree.png)
从图中可以看到，b+树有以下特点：
1. 非叶子结点只存有索引和索引指针，具体记录在叶子结点上。
2. 叶子结点通过指针连接。
由于以上特点，b+树索引查询时间复杂度相对b树稳定（b树非叶子结点保存了具体记录），由于特性2，非叶子结点通过指针连接，比较适合对索引值范围查找的场景。

在b+树搜索某一具体记录时，先从根结点搜索，通过二分法定位到下一结点指针，重复步骤直到叶子结点（包含要查找记录的一页数据），最后在页内数据通过二分查找即可定位到具体记录。

在具体存储上，索引都是按页存储，页的大小一般默认16KB，对于非叶子结点，假设索引大小为8B，索引指针大小也为8B，则一页能存储1000条索引数据，叶子结点保存了具体数据，假设一条记录大小为1KB, 则一页可存16条记录，对于高度为2的b+树，可索引16000条记录(1000\*16)，3层b+树可索引1600w条记录(1000\*1000\*16)，也就是说千万级别的数据只需要3层b+树，索引命中的情况下查询数据，3次IO即可得到想要的数据，效率非常高。

## 聚簇索引和非聚簇索引
通常一个table的主键是聚簇索引，主键外的其他索引为非聚簇索引。聚簇索引和非聚簇索引的区别在于叶子结点记录的值，非聚簇索引叶子结点保存的主键id，如果要得到具体记录，还需要根据主键值回到主键索引上查找，这个过程叫做回表。

在日常业务使用中，如果能避免回表可以很大提升查询性能（**索引覆盖**技术），比如现在有如下table:
```sql
create table t_index_test
(
    id bigint auto_increment
        primary key,
    a int not null,
    b int not null,
    index idx_a(a)
);

insert into t_index_test (a, b) values(1, 1), (2, 2), (3, 3);
```
表t_index_test中的a字段创建了索引，现有两条sql查询语句如下：
```sql
select * from t_index_test where a=1;

select a from t_index_test where a=1;
```
两个sql主要区别在于第二条sql select一个字段，而第一个sql需要查询全部字段，通过explian命令分析查询如下：
![avatar](/assets/img/index_return_table_explain.png)

通过explain看到基本两条sql查询都用到了索引a，但第二条sql的Extra字段有Using index，而查询全部字段的sql Extra为空，Extra显示了mysql解析查询的额外信息，Using index表示所需要的数据在索引中获取即可，不需要回表读取数据，相对第一条sql查询，减少了IO查询次数进而提升查询效率。

上面的查询条件中只有索引数据，如果查询条件中除了索引条件外还含有非索引字段查询条件，查询还会只走一次索引查询吗？通过一下sql实验一下：
```sql
explian select a from t_index_test where a=1 and b=1;
```
结果如下：
![avatar](/assets/img/index_return_table_where.png)
可以看到，Extra变成了Using where:不是仅仅通过索引就可以获取所有需要的数据，where加上了非索引数据条件，虽然只select了索引字段，但还是需要回表。

提到了**索引覆盖**，顺便提一下**索引下推**，索引下推指的是在回表之前，根据where条件过滤掉不符合条件的数据从而减少io次数，比如有联合索引（name, age）, 查询where条件为name like '张%' and age=28, 如果没有索引下推，根据联合索引最左匹配原则，遇到like查询，后面的查询条件不会走索引，查询步骤为：
1. 通过索引查询得到name以张开头的数据主键。
2. 对主键逐一回表。
3. 得到全部的具体数据后，过滤掉age不等于28的数据。
4. 返回结果。

如果有索引下推，在有联合索引（name, age）的前提下，查询数据的步骤为：
1. 通过索引查询得到name以张开头并判断age=28, 符合条件则记录主键。
2. 通过主键得到全部数据（回表）。
3. 返回结果。

可以看到，索引下推在回表前，对数据进行了过滤。

## 联合索引
还是基于t_index_test表，执行以下sql，将索引a, 变成联合索引(a, b):
```sql
-- 删除之前索引
drop index idx_a on t_index_test;
alter table t_index_test add index idx_a_b (a, b);
```
联合索引命中需要遵循最左匹配原则：
1. 联合索引遇到like、范围查询、函数停止匹配，比如查询：
    ```sql
    select a, b from t_index_test where a > 1 and b = 2;
    ```
    b=2不会走联合索引
2. 索引先后顺序问题：
    ```sql
    -- 会走索引(a, b), 虽然查询条件b在前，优化器会识别并调整
    select * from t_index_test where b = 2 and a = 2;

    -- 不会走索引
    select * from t_index_test where b = 2;
    ``` 
    > 为什么`select * from t_index_test where b=2`命中不了联合索引(a, b), 这和数据的有序性有关系。如果索引是单列，这个单列索引在存储上是全局有序的，如果是联合索引如(a, b), a在全局上是有序的，而b列的数据，在a相等的前提下，b是有序的，但b在全局上是乱序的，所以无法通过索引去查找数据（有序数组二分查找）
    {: .prompt-danger }

## 查询优化
mysql 8.0版本对子查询进行了不少优化，一些子查询会优化成join，在日常使用中可以尽情使用子查询，对于之前版本，还是要理解下join，子查询的查询逻辑。

join查询：
1. 在有索引的情况下，尽量用小表作为驱动表，因为有索引的查询逻辑为（假设a join b）：
    - 循环a表数据，当前每条记录去b表查询（走索引），查询的时间复杂度为len(a)*log(len(b))
2. 在没有索引的情况下，如果内存足够，会全表扫描a和b表数据，并在内存中关联数据；如果内存不够，需要扫描冷len(a) * len(b)次表，数据量极大，尽量避免；

子查询IN:
in单列查询可以转换成or，索引存在的话会走索引。

子查询exists：
exists子查询会全表扫描外表，每扫描一条记录去子查询中查看是否复合条件，子查询最好在业务中转换成join，当然不是绝对的，具体情况具体分析。另外，如果我们在用到子查询发现非常慢，通过explain分析select_type出现DEPENDENT SUBQUERY（依赖子查询）的情况，这种情况可以转换成派生表优化。


    